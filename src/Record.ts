import * as uuid from 'uuid';
import {Data} from "./Data";
import {Model} from "./Model";
import * as reducers from '@f9software/reducers';
import {reducer, ReducedRecord} from './Reducer';
import {enhancer} from './Enhancer';

/**
 * A Record is a object that is tightly coupled to a Model, meaning that the structure of a Record is given by model.
 * This means that a Record an only store (set/get) defined in the fields (Field) of its Model. Record only has meaning
 * in the context of a Model, so when we refer to a record we have to mention the Model too. For example, we can say
 * record of type user, record of type document, record of type service etc.
 * 
 * Once a Record is initialized with a certain Model, the Model cannot be changed.
 * 
 * Any change on the Model, like adding or removing fields (Field), or making any change to any of the fields of the
 * Model of the Record, these changes will be reflected on every living Record of that Model.
 *
 * Every Record has a unique identifier which is generated at Record initialization. This identifier cannot be changed 
 * and it will exist as long as the instance exist, but it will never be persisted. This unique ID can be accessed 
 * using the getInstanceId() method.
 *
 * Record is using Data underneath to store values.
 */
export class Record<T> {
    /**
     * Each instance of a record has it's own unique id. Multiple instances of Record may refer to the same information, and 
     * will still have different instanceId values. This value will exist for as long as the object exists and cannot be manipulated.
     */
    private readonly instanceId = uuid.v1();

    private data: Data<T> | undefined;

    /**
     * Whether it is destroyed or not.
     */
    private destroyed = false;

    /**
     * A reference to the model. Model becomes undefined when it gets destroyed.
     */
    private model: Model<T> | undefined;

    /**
     *
     * @param {Model} model
     */
    public constructor(model: Model<T>) {
        this.model = model;

        // data will be populated with the data generated by model's initData method
        this.data = model.initData();
    }

    public get<K extends keyof T>(field: K): T[K] {
        if (this.data) {
            return this.data.get(field);
        } else {
            throw new Error('Data is not available for the record.');
        }
    }

    /**
     * Set data for single field.
     * @param {string} field
     * @param value
     */
    public set<K extends keyof T>(field: K, value: T[K]) {
        if (this.data) {
            this.data.set(field, value);
        } else {
            throw new Error('Data is not available for the record.');
        }
    }

    /**
     * Set data for multiple fields.
     */
    public setAll(data: Partial<T>) {
        if (this.data) {
            this.data.setAll(data);
        }
    }

    /**
     *
     * @returns {Model}
     */
    public getModel(): Model<T> {
        if (this.model) {
            return this.model;
        } else {
            throw new Error('No access to Model of this record.');
        }
    }

    /**
     * This ID is identifying the instance. Is unique and should never be two Record(s) with the same ID.
     * @returns {string}
     */
    public getInstanceId() {
        return this.instanceId;
    }

    /**
     * Dumps the data. Developer can chose whether to include or not default values for fields that are not populated.
     * @param {boolean} includeDefaultValues
     * @returns {{[p: string]: any}}
     */
    public dump(includeDefaultValues: boolean = true): Partial<T> {
        if (this.data) {
            return this.data.dump(includeDefaultValues);
        } else {
            throw new Error('Data is not available for this record.');
        }
    }

    /**
     * Destroys the Record. The instance cannot be used after destruction.
     */
    public destroy() {
        if (this.destroyed) {
            throw new Error('Trying to destroy an already destroyed record.');
        }

        if (this.data) {
            this.data.destroy();
            this.data = undefined;
        }

        this.model = undefined;
        this.destroyed = true;
    }

    public isDestroyed() {
        return this.destroyed;
    }
}

// TODO Improve reducers.
// we register the "record" Type
reducers.register(
    new reducers.Type<Record<any>, ReducedRecord>(value => value instanceof Record, reducer, enhancer),
    'record'
);
